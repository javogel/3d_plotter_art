"use strict";
exports.__esModule = true;
var box_1 = require("./box");
var hit_1 = require("./hit");
var EPS = 1e-9;
var Triangle = /** @class */ (function () {
    function Triangle(v1, v2, v3) {
        this.v1 = v1;
        this.v2 = v2;
        this.v3 = v3;
        this.box = this.calculateBoundingBox();
    }
    Triangle.prototype.toString = function () {
        return "v1: " + this.v1 + " v2: " + this.v2 + " v3: " + this.v3;
    };
    Triangle.prototype.calculateBoundingBox = function () {
        var min = this.v1.min(this.v2).min(this.v3);
        var max = this.v1.max(this.v2).max(this.v3);
        return new box_1.Box(min, max);
    };
    Triangle.prototype.updateBoundingBox = function () {
        var box = this.calculateBoundingBox();
        this.box = box;
    };
    Triangle.prototype.compile = function () {
        // Noop
    };
    Triangle.prototype.boundingBox = function () {
        return this.box;
    };
    Triangle.prototype.contains = function (v, f) {
        return false;
    };
    Triangle.prototype.intersect = function (r) {
        var e1x = this.v2.x - this.v1.x;
        var e1y = this.v2.y - this.v1.y;
        var e1z = this.v2.z - this.v1.z;
        var e2x = this.v3.x - this.v1.x;
        var e2y = this.v3.y - this.v1.y;
        var e2z = this.v3.z - this.v1.z;
        var px = r.direction.y * e2z - r.direction.z * e2y;
        var py = r.direction.z * e2x - r.direction.x * e2z;
        var pz = r.direction.x * e2y - r.direction.y * e2x;
        var det = e1x * px + e1y * py + e1z * pz;
        if (det > -EPS && det < EPS) {
            return hit_1.NoHit;
        }
        var inv = 1 / det;
        var tx = r.origin.x - this.v1.x;
        var ty = r.origin.y - this.v1.y;
        var tz = r.origin.z - this.v1.z;
        var u = (tx * px + ty * py + tz * pz) * inv;
        if (u < 0 || u > 1) {
            return hit_1.NoHit;
        }
        var qx = ty * e1z - tz * e1y;
        var qy = tz * e1x - tx * e1z;
        var qz = tx * e1y - ty * e1x;
        var v = (r.direction.x * qx + r.direction.y * qy + r.direction.z * qz) * inv;
        if (v < 0 || u + v > 1) {
            return hit_1.NoHit;
        }
        var d = (e2x * qx + e2y * qy + e2z * qz) * inv;
        if (d < EPS) {
            return hit_1.NoHit;
        }
        return new hit_1["default"](this, d);
    };
    Triangle.prototype.paths = function () {
        return [[this.v1, this.v2], [this.v2, this.v3], [this.v3, this.v1]];
    };
    return Triangle;
}());
exports["default"] = Triangle;
