"use strict";
exports.__esModule = true;
var box_1 = require("./box");
var vector_1 = require("./vector");
var hit_1 = require("./hit");
var Paths = require("./paths");
var TransformedShape = /** @class */ (function () {
    function TransformedShape(shape, matrix) {
        this.shape = shape;
        this.matrix = matrix;
        this.inverse = matrix.inverse();
    }
    TransformedShape.prototype.compile = function () {
        this.shape.compile();
    };
    TransformedShape.prototype.boundingBox = function () {
        return this.matrix.mulBox(this.shape.boundingBox());
    };
    TransformedShape.prototype.contains = function (v, f) {
        return this.shape.contains(this.inverse.mulPosition(v), f);
    };
    TransformedShape.prototype.intersect = function (r) {
        return this.shape.intersect(this.inverse.mulRay(r));
    };
    TransformedShape.prototype.paths = function () {
        var paths = this.shape.paths();
        return Paths.transform(paths, this.matrix);
    };
    return TransformedShape;
}());
exports.TransformedShape = TransformedShape;
var EmptyShape = /** @class */ (function () {
    function EmptyShape() {
    }
    EmptyShape.prototype.compile = function () {
        // noop
    };
    EmptyShape.prototype.boundingBox = function () {
        var min = new vector_1["default"](0, 0, 0);
        var max = new vector_1["default"](0, 0, 0);
        return new box_1.Box(min, max);
    };
    EmptyShape.prototype.contains = function (v, f) {
        return false;
    };
    EmptyShape.prototype.intersect = function (r) {
        return hit_1.NoHit;
    };
    EmptyShape.prototype.paths = function () {
        return [];
    };
    return EmptyShape;
}());
exports.EmptyShape = EmptyShape;
