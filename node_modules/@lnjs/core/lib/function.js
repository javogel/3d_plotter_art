"use strict";
exports.__esModule = true;
var vector_1 = require("./vector");
var hit_1 = require("./hit");
var math_1 = require("./math");
var Direction;
(function (Direction) {
    Direction[Direction["Above"] = 0] = "Above";
    Direction[Direction["Below"] = 1] = "Below";
})(Direction = exports.Direction || (exports.Direction = {}));
var Function = /** @class */ (function () {
    function Function(fn, box, direction) {
        this.fn = fn;
        this.box = box;
        this.direction = direction;
    }
    Function.prototype.compile = function () {
        // Noop
    };
    Function.prototype.boundingBox = function () {
        return this.box;
    };
    Function.prototype.contains = function (v, eps) {
        if ((this.direction = Direction.Below)) {
            return v.z < this.fn(v.x, v.y);
        }
        return v.z > this.fn(v.x, v.y);
    };
    Function.prototype.intersect = function (ray) {
        var step = 1 / 64;
        var sign = this.contains(ray.position(step), 0);
        for (var t = step; t < 10; t += step) {
            var v = ray.position(t);
            if (this.contains(v, 0) !== sign && this.box.contains(v)) {
                return new hit_1["default"](this, t);
            }
        }
        return hit_1.NoHit;
    };
    Function.prototype.paths = function () {
        var paths = [];
        var fine = 1.0 / 256;
        for (var a = 0; a < 360; a += 5) {
            var path = [];
            for (var r = 0.0; r <= 8.0; r += fine) {
                var x = Math.cos(math_1.radians(a)) * r;
                var y = Math.sin(math_1.radians(a)) * r;
                var z = this.fn(x, y);
                var o = -Math.pow(-z, 1.4);
                x = Math.cos(math_1.radians(a) - o) * r;
                y = Math.sin(math_1.radians(a) - o) * r;
                z = Math.min(z, this.box.max.z);
                z = Math.max(z, this.box.min.z);
                path.push(new vector_1["default"](x, y, z));
            }
            paths.push(path);
        }
        return paths;
    };
    return Function;
}());
exports.Function = Function;
