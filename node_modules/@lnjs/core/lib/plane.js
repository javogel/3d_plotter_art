"use strict";
exports.__esModule = true;
var vector_1 = require("./vector");
var EPS = 1e-9;
var Plane = /** @class */ (function () {
    function Plane(point, normal) {
        this.point = point;
        this.normal = normal;
    }
    Plane.prototype.intersectSegment = function (v0, v1) {
        var u = v1.sub(v0);
        var w = v0.sub(this.point);
        var d = this.normal.dot(u);
        var n = -this.normal.dot(w);
        if (d > -EPS && d < EPS) {
            return [new vector_1["default"](0, 0, 0), false];
        }
        var t = n / d;
        if (t < 0 || t > 1) {
            return [new vector_1["default"](0, 0, 0), false];
        }
        var v = v0.add(u.multiplyScalar(t));
        return [v, true];
    };
    Plane.prototype.intersectTriangle = function (t) {
        var _a = this.intersectSegment(t.v1, t.v2), v1 = _a[0], ok1 = _a[1];
        var _b = this.intersectSegment(t.v2, t.v3), v2 = _b[0], ok2 = _b[1];
        var _c = this.intersectSegment(t.v3, t.v1), v3 = _c[0], ok3 = _c[1];
        if (ok1 && ok2) {
            return [v1, v2, true];
        }
        if (ok1 && ok3) {
            return [v1, v3, true];
        }
        if (ok2 && ok3) {
            return [v2, v3, true];
        }
        return [new vector_1["default"](0, 0, 0), new vector_1["default"](0, 0, 0), false];
    };
    Plane.prototype.intersectMesh = function (m) {
        var result = [];
        for (var _i = 0, _a = m.triangles; _i < _a.length; _i++) {
            var t = _a[_i];
            var _b = this.intersectTriangle(t), v1 = _b[0], v2 = _b[1], ok = _b[2];
            if (ok) {
                result.push([v1, v2]);
            }
        }
        return result;
    };
    return Plane;
}());
exports["default"] = Plane;
